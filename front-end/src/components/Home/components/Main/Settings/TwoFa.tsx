import { useEffect, useState, useRef } from 'react'
import axios from '../../../../../Interceptor/Interceptor'
import { get2FA } from '../../../../../features/2FA';
import { useDispatch } from 'react-redux';
import { AppDispatch } from '../../../../../store/store';

function TwoFa(props: any) {
    const disptach : AppDispatch = useDispatch();
    const [Code, setCode] = useState<number[]>([-1, -1, -1, -1, -1, -1]);
    const inputRefs = useRef<(HTMLInputElement | null)[]>([]);
    const [Steps, setSteps] = useState({ first: (props.firstTime === true ? true : false), second: (props.firstTime === false ? true : false), third: false });
    const [QrCode, setQrcode] = useState('');
    const [isValidate, setValidate] = useState<null | boolean>(null);
    useEffect(() => {
        if (inputRefs.current[0]) {
            inputRefs.current[0].focus();
        }
    }, []);
    
    useEffect(() => {
        if (Steps.second === true)
        {
            const FetchData =  async () => {
                await axios.get('/auth/enable-2fa').then((resp) => {
                    setQrcode(resp.data)
                });
            }
            FetchData();
        }
    }, [Steps])
    const RenderInputs = () => {
        const inputs = [];

        for (let i = 0; i < 6; i++) {
            inputs.push(
                <div className={isValidate === false ? "numberInput codeAni" : "numberInput"} key={`numberInput-${i}`}>
                    <input
                        ref={(ref) => (inputRefs.current[i] = ref)}
                        onChange={(e: any) => handleChange(e, i)}
                        type="number"
                        name={`number-${i}`}
                        id=""
                        maxLength={1}
                        placeholder="0"
                        onKeyDown={(e: any) => handleKeyDown(e, i)}
                    />
                </div>
            );
        }

        return inputs;
    };

    const handleChange = (e: any, i: number) => {
        if (e.target.value !== '') {

            e.target.value = e.target.value[e.target.value.length - 1];
            const tmp = [...Code];
            tmp[i] = parseInt(e.target.value, 10);
            setCode(tmp);

            if (inputRefs.current[i + 1]?.focus) {
                inputRefs.current[i + 1]?.focus();
            }
        }
    };
    const handleKeyDown = (e: any, i: number) => {
        if (i > 0 && e.key === 'Backspace') {
            e.preventDefault(); // Prevent the default backspace behavior
            e.target.value = '';
            const tmp = [...Code];
            tmp[i] = -1;
            setCode(tmp);

            if (inputRefs.current[i - 1]?.focus) {
                inputRefs.current[i - 1]?.focus(); // Focus on the previous input field if it exists
            }
        }
    };
    
    return (
        <div className="twoFa">
            <div className="twoFA-cont">
                <h1>Set up 2FA in Account</h1>
                <div className="main2FA">
                    {
                        Steps.first === true ?
                            <ol type="1" className="tuto">
                                <li>Install the Google Authenticator app on your phone.</li>
                                <li>Open the app and select "Add Account."</li>
                                <li>Choose the option to scan a QR Code.</li>
                                <li>Click Next. Use your phone's camera to scan the QR Code.</li>
                                <li>Click Next. Enter the verification code generated by Google Authenticator and click Submit.</li>
                                <li>In the future, use the Google Authenticator to generate a new verification code whenever you log in to your account.</li>
                            </ol>
                            :
                            Steps.second ?
                                <img src={QrCode} alt="" />
                            : Steps.third ?
                            <div className="codeGenerating">{RenderInputs()}</div> : <></>
                    
                    }
                </div>
                <div className="footer-2fa">
                    <button onClick={() => {
                        if(Steps.first)
                            setSteps({first: false, second: true, third: false})
                        else if (Steps.second)
                            setSteps({first: false, second: false, third: true})
                        else if (Steps.third)
                        {
                            if (!Code.includes(-1))
                            {
                                const CodeGenerator = Code.join('');
                                const SendData = async () => {
                                    await axios.post('/auth/verify-2fa', {Code: CodeGenerator}).then((resp) => {
                                        setValidate(resp.data);
                                        if (resp.data === true)
                                        {
                                            props.set2FA(false);
                                            props.setPop(false);
                                        }
                                    });
                                }
                                SendData();
                                disptach(get2FA()); 
                            }
                        }
                    }}>{Steps.third ? 'Submit' : 'Next'}</button>
                    {(Steps.second || Steps.third ) && <button onClick={() =>{
                        if (Steps.second)
                        setSteps({first: true, second: false, third: false})
                    else if (Steps.third)
                        setSteps({first: false, second: true, third: false})
                    }} style={{ backgroundColor: '#ED5152' }}>Prev</button>}
                </div>
            </div>
        </div>
    );
}

export default TwoFa;